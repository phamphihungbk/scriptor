"use strict";
const electron = require("electron");
const node_url = require("node:url");
const node_path = require("node:path");
const node_process = require("node:process");
const ALLOWED_ORIGINS_AND_PERMISSIONS = /* @__PURE__ */ new Map(
  [[new node_url.URL("http://localhost:5173/").origin, /* @__PURE__ */ new Set()]]
);
const ALLOWED_EXTERNAL_ORIGINS = /* @__PURE__ */ new Set(["https://github.com"]);
electron.app.on("web-contents-created", (_, contents) => {
  contents.on("will-navigate", (event, url) => {
    const { origin } = new node_url.URL(url);
    if (ALLOWED_ORIGINS_AND_PERMISSIONS.has(origin)) {
      return;
    }
    event.preventDefault();
    {
      console.warn(`Blocked navigating to disallowed origin: ${origin}`);
    }
  });
  contents.session.setPermissionRequestHandler((webContents, permission, callback) => {
    const { origin } = new node_url.URL(webContents.getURL());
    const permissionGranted = !!ALLOWED_ORIGINS_AND_PERMISSIONS.get(origin)?.has(permission);
    callback(permissionGranted);
    if (!permissionGranted && true) {
      console.warn(`${origin} requested permission for '${permission}', but was rejected.`);
    }
  });
  contents.setWindowOpenHandler(({ url }) => {
    const { origin } = new node_url.URL(url);
    if (ALLOWED_EXTERNAL_ORIGINS.has(origin)) {
      electron.shell.openExternal(url).catch(console.error);
    } else {
      console.warn(`Blocked the opening of a disallowed origin: ${origin}`);
    }
    return { action: "deny" };
  });
  contents.on("will-attach-webview", (event, webPreferences, params) => {
    const { origin } = new node_url.URL(params.src);
    if (!ALLOWED_ORIGINS_AND_PERMISSIONS.has(origin)) {
      {
        console.warn(`A webview tried to attach ${params.src}, but was blocked.`);
      }
      event.preventDefault();
      return;
    }
    delete webPreferences.preload;
    delete webPreferences.preloadURL;
    webPreferences.nodeIntegration = false;
    webPreferences.contextIsolation = true;
  });
});
async function createWindow() {
  const browserWindow = new electron.BrowserWindow({
    show: false,
    // Use the 'ready-to-show' event to show the instantiated BrowserWindow.
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      sandbox: false,
      // Sandbox disabled because the demo of preload script depend on the Node.js api
      webviewTag: false,
      // The webview tag is not recommended. Consider alternatives like an iframe or Electron's BrowserView. @see https://www.electronjs.org/docs/latest/api/webview-tag#warning
      preload: node_path.join(electron.app.getAppPath(), "packages/preload/dist/index.cjs")
    }
  });
  browserWindow.on("ready-to-show", () => {
    browserWindow?.show();
    {
      browserWindow?.webContents.openDevTools();
    }
  });
  {
    await browserWindow.loadURL("http://localhost:5173/");
  }
  return browserWindow;
}
async function restoreOrCreateWindow() {
  let window = electron.BrowserWindow.getAllWindows().find((w) => !w.isDestroyed());
  if (window === void 0) {
    window = await createWindow();
  }
  if (window.isMinimized()) {
    window.restore();
  }
  window.focus();
}
const isSingleInstance = electron.app.requestSingleInstanceLock();
if (!isSingleInstance) {
  electron.app.quit();
  process.exit(0);
}
electron.app.on("second-instance", restoreOrCreateWindow);
electron.app.disableHardwareAcceleration();
electron.app.on("window-all-closed", () => {
  if (node_process.platform !== "darwin") {
    electron.app.quit();
  }
});
electron.app.on("activate", restoreOrCreateWindow);
electron.app.whenReady().then(restoreOrCreateWindow).catch((e) => console.error("Failed create window:", e));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
